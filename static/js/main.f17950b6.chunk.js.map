{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PokeCheckBox","checkbox","checked","this","props","value","type","className","disabled","React","Component","PokeID","id","PokeIcon","name","src","alt","toLowerCase","PokeTypes","types","Array","from","map","PokeSelect","data","PokeGeneric","Pokemon","padded_id","join","slice","pokeData","gender","nature","iv","dynamax","language","ball","caught","owned","select","Region","region_ranges","galar","isle","tundra","elements","start","region","end","console","log","i","push","Trainer","process","Pokedex","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f17950b6.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport pokeData from './galar_dex.json';\n\nclass PokeCheckBox extends React.Component {\n  render () {\n    var checkbox;\n    var checked = this.props.value;\n    var type    = this.props.type;\n\n    if (checked) {\n      checkbox = <input type=\"checkbox\" className=\"nes-checkbox\" disabled=\"disabled\" checked=\"checked\"/>;\n    } else {\n      checkbox = <input type=\"checkbox\" className=\"nes-checkbox\" disabled=\"disabled\"/>;\n    }\n    \n    return (\n      <div className=\"poke_info\"><label>{ checkbox }<span>{ type }</span></label></div>\n    )\n  }\n}\n\nclass PokeID extends React.Component {\n  render () {\n    return <div className=\"pokemon_id\">{ this.props.id }</div>\n  }\n}\n\nclass PokeIcon extends React.Component {\n  render () {\n    var type = this.props.type;\n    var name = this.props.name;\n\n    if (name) {\n      if (type === \"pokemon\") {\n        return (\n          <div className=\"poke_icon\">\n              <img src={process.env.PUBLIC_URL + '/icons/' + name + '.png'} alt={ name }/>\n          </div>\n        )\n      } else if (type === \"pokeball\") {\n        return (\n          <div className=\"poke_ball\">\n            <img src={process.env.PUBLIC_URL + '/icons/pokeballs/' + name.toLowerCase() + 'ball.png'} alt={ name }/>\n          </div>\n        )\n      } else if (type === \"gender\") {\n        return (\n          <div className=\"poke_ball\">\n            <img src={process.env.PUBLIC_URL + '/icons/' + name.toLowerCase() + '.png'} alt={ name }/>\n          </div>\n        )\n      }\n    } else {\n      return (<div className=\"poke_ball\"></div>)\n    }\n  }\n}\n\nclass PokeTypes extends React.Component {\n  render () {\n    var types = Array.from(this.props.types);\n    return (\n      <div className=\"poke_types\">\n        { types.map((type) => (\n          <img src={process.env.PUBLIC_URL + '/icons/types/' + type.toLowerCase() + '.gif'} alt={ type }/>\n        ))}\n      </div>\n    );\n  }\n}\n\nclass PokeSelect extends React.Component {\n  render () {\n    var data     = this.props.data;\n    {/*\n    var select   = this.props.select;\n    var natures  = [\"Adamant\", \"Bashful\", \"Bold\", \"Brave\", \"Calm\", \"Careful\", \"Docile\", \"Gentle\", \"Hardy\", \"Hasty\", \"Impish\", \"Jolly\", \"Lax\", \n                    \"Lonely\", \"Mild\", \"Modest\", \"Naive\", \"Naughty\", \"Quiet\", \"Quirky\", \"Rash\", \"Relaxed\", \"Sassy\", \"Serious\", \"Timid\", \"None\"]\n    var regions  = [\"ENG\", \"CHS\", \"CHT\", \"SPA\", \"ITA\", \"GER\", \"FRE\", \"KOR\", \"None\"]\n    var genders  = [\"M\", \"F\", \"N/A\"]\n    var category = []\n    var elements = []\n\n    if (select === \"nature\") { \n      category = natures;\n    } else if (select === \"gender\") {\n      category = genders;\n    } else if (select === \"region\") {\n      category = regions;\n    }\n\n    category.forEach( function (option) {\n      if (option === data) { \n        elements.push(<option key={ option } selected=\"selected\">{ option }</option>)\n      } else { \n        elements.push(<option key={ option }>{ option }</option>) \n      }\n    });\n   \n    return ( \n      <select disabled=\"disabled\">\n        { elements }\n      </select> \n    )\n    */}\n    return (\n      <div className=\"poke_info\">{ data }</div>\n    )\n  }\n}\n\nclass PokeBall extends React.Component {\n}\n\nclass PokeGeneric extends React.Component {\n  render () {\n    var data = this.props.data;\n    return (\n      <div className=\"poke_info\"> { data } </div>\n    )\n  }\n}\n\nclass Pokemon extends React.Component {\n  render() {\n    var id        = this.props.id;\n    var padded_id = (Array(3).join('0') + id).slice(-3);\n    var name      = pokeData[ padded_id ][\"Name\"];\n    var types     = pokeData[ padded_id ][\"Types\"];\n    var gender    = pokeData[ padded_id ][\"Gender\"];\n    var nature    = pokeData[ padded_id ][\"Nature\"];\n    var iv        = pokeData[ padded_id ][\"IVs\"];\n    var dynamax   = pokeData[ padded_id ][\"Dynamax\"];\n    var language  = pokeData[ padded_id ][\"Region\"];\n    var ball      = pokeData[ padded_id ][\"Ball\"];\n    var caught    = pokeData[ padded_id ][\"Caught\"];\n    var owned     = pokeData[ padded_id ][\"Owned\"];\n    return (\n      <div className=\"row nes-container is-rounded pokemon\">\n        <PokeID       id={ padded_id }                                  />\n        <PokeIcon     name={ id }     type=\"pokemon\"                    />\n        <PokeGeneric  data={ name }                                     />\n        <PokeTypes    types={ types }                                   />\n        <PokeCheckBox type=\"Caught\"   value={ caught }                  />\n        <PokeCheckBox type=\"Owned\"    value={ owned }                   />\n        <PokeIcon     name={ ball }   type=\"pokeball\"                   />\n        <PokeSelect   select=\"gender\" data={ gender }                   />\n        <PokeSelect   select=\"nature\" data={ nature }                   />\n        <PokeGeneric  data={ \"IVs: \" + iv + \"/6\" }                      />\n        <PokeGeneric  data={ \"Dynamax: \" + dynamax + \"/10\" }      />\n        <PokeSelect   select=\"region\" data={ language }                 />\n      </div>\n    );\n  }\n}\n\nclass Region extends React.Component {\n  render() {\n    var region_ranges = {galar: [1,400], isle: [401,600], tundra: [601,800]};\n    var elements = [];\n    var start = region_ranges[this.props.region][0];\n    var end   = region_ranges[this.props.region][1];\n    console.log({ pokeData });\n    for (var i=start; i<end+1; i++) {\n      elements.push(<Pokemon id={i}/>); \n    }\n\n    return (\n      <div className=\"col-xs-12\">\n        { elements }\n      </div>\n    )\n  }\n}\n\nclass Trainer extends React.Component {\n  render () {\n    var name = \"Reine\";\n    return (\n      <div id=\"trainer\" className=\"container\">\n        <div className=\"row nes-container with-title is-rounded\">\n          <p className=\"title\">{ name }</p>\n          <div className=\"col-xs-12\"><div className=\"row\">\n            <div className=\"col-xs-2 trainer\">\n              <img src={process.env.PUBLIC_URL + '/icons/' + name + '.png'} alt={ name }/>\n            </div>\n            <div className=\"col-xs-10\">\n              <div className=\"row\">\n                <div className=\"col-xs nes-container is-rounded\">badges</div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col-xs nes-container is-rounded pokemon\"><img src={process.env.PUBLIC_URL + '/icons/9.png'} alt=\"Inteleon\"/></div>\n                <div className=\"col-xs nes-container is-rounded pokemon\"><img src={process.env.PUBLIC_URL + '/icons/69.png'} alt=\"Ninetales\"/></div>\n                <div className=\"col-xs nes-container is-rounded pokemon\"><img src={process.env.PUBLIC_URL + '/icons/209.png'} alt=\"Meowstic\"/></div>\n                <div className=\"col-xs nes-container is-rounded pokemon\"><img src={process.env.PUBLIC_URL + '/icons/219.png'} alt=\"Sirfetch'd\"/></div>\n                <div className=\"col-xs nes-container is-rounded pokemon\"><img src={process.env.PUBLIC_URL + '/icons/81.png'} alt=\"Froslass\"/></div>\n                <div className=\"col-xs nes-container is-rounded pokemon\"><img src={process.env.PUBLIC_URL + '/icons/311.png'} alt=\"Toxtricity\"/></div>\n              </div>\n            </div>\n          </div></div>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass Pokedex extends React.Component {\n\n  render() {\n    return (\n      <div className=\"page\">\n        <div className=\"header\">\n          <button className=\"region\">Galar Basic</button>\n          <button className=\"region\">Isle of Whatever</button>\n          <button className=\"region\">Something Tundra</button>\n        </div>\n        <Trainer/>\n        <div id=\"pokedex\" className=\"container\">\n          <div className=\"row nes-container with-title is-rounded\">\n            <p className=\"title\">Pokedex</p>\n            <Region region=\"galar\"/>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Pokedex;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Pokedex from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Pokedex />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}